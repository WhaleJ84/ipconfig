#!/usr/bin/env sh
set -x

# Ensure the user is running with superuser privileges
[ $(id -u) != 0 ] && echo 'This script must be run with superuser privileges.' && exit 0

IPCIDR="([[:digit:]]{1,3}\.){3}[[:digit:]]{1,3}/[[:digit:]]{1,2}"
# TODO: Ensure /etc/netplan is the correct dir for configs
netplan=$(ls /etc/netplan/01-*.yaml)
resolve=$(ls /etc/systemd/resolved.conf)
hostname=$(cat /etc/hostname)
# Check for installed programs
[ $(command -v NetworkManager 2>/dev/null) ] && networkmanager='true'
[ $(command -v dmenu 2>/dev/null) ] && dmenu='true'
[ $(command -v notify-send 2>/dev/null) ] && notifysend='true'
unset dmenu # FOR DEBUG PURPOSES
unset notifysend # FOR DEBUG PURPOSES

backup_restore(){
    #[ $2 ] && file=$2 || read -p 'Enter file: ' file
    [ $2 ] && file=$2 || file=$(communicate prompt 'Enter file:' '' "file")
    [ ! -f $file ] && backup_restore $1
    backup(){
        cp $file "$file.bak"
    }
    restore(){
        cp "$file.bak" $file
    }
    case $1 in
        backup) backup $2;;
        restore) restore $2;;
        *) communicate notify "backup\nrestore";;
    esac
}
# Ensure there is a backup. Requires sudo privileges
[ ! -e $netplan.bak ] && backup_restore backup $netplan
[ ! -e $resolve.bak ] && backup_restore backup $resolve

validate_input(){
    [ -z $2 ] && echo 'No input' || input="$2"
    alpha(){
        output=$(echo "$input" | sed 's/[^[:alpha:] ]//g' | tr '[:upper:]' '[:lower:]')
        echo "$output"
    }
    #num(){
        ##
    #}
    #alnum(){
        ##
    #}

    case $1 in
        alpha) alpha $2;;
    esac
}

communicate(){
    prompt(){
        description="$1"; options="$2"; outcome="$3"
        ### TODO: FIX DMENU IMPLEMENTATION
        if [ $dmenu ]; then
            validate_input alpha $(printf "$options" | dmenu -i -p "$description")
        else
            read -p "$description [$options] " outcome; echo $outcome
        fi
    }

    notify(){
        [ $notifysend ] && notify-send "$1" || echo "$1"
    }

    case $1 in
        prompt) prompt "$2" "$3" "$4";;
        notify) notify "$2";;
    esac
}

get_connected_interfaces(){
    [ $dmenu ] && interfaces=$(ls /sys/class/net | awk 'BEGIN { ORS=" " }; {print $1}' | sed 's/ /\\n/g') || interfaces=$(ls /sys/class/net)
}

select_interface(){
    [ -z $interfaces ] && get_connected_interfaces
    interface=$(communicate prompt 'Select interface' $interfaces)
    [ $(ls /sys/class/net | grep -e "$interface") ] || select_interface
}

get_interface_information(){
    [ -z $interface ] && select_interface
    renderer=$(grep renderer $netplan | awk '{print $2}')
    dhcp4=$(grep dhcp4 $netplan | awk '{print $2}')
    [ ! $dhcp4 ] && dhcp4='no'
    ipv4=$(ip address show dev $interface | grep -e 'inet ' | sed -E 's|[^[:digit:]]*(([[:digit:]]{1,3}\.){3}[[:digit:]]{1,3}/[[:digit:]]{1,2}).*|\1|')
    gateway4=$(ip route show dev $interface | grep -e 'default via' | sed -E 's/[^[:digit:]]*(([[:digit:]]{1,3}\.){3}[[:digit:]]{1,3}).*/\1/' | head -1)
    nameserver4=$(grep -e 'nameserver' /etc/resolv.conf | cut -f2 -d' ')
    domainname=$(egrep -e "^([[:digit:]]{1,3}\.){3}[[:digit:]]{1,3}[^[:alpha:]]*$hostname\.?([[:alpha:]])?" /etc/hosts | cut -f5 -d. | awk '{print $2}')
    [ ! $domainname ] && domainname='not set'
}

print_interface_information(){
    [ $1 ] && interface=$1 && get_interface_information $interface
    [ -z $renderer $dhcp4 $ipv4 $gateway4 $nameserver $domainname ] 2>/dev/null && get_interface_information
    communicate notify "Renderer: $renderer"
    communicate notify "DHCP: $dhcp4"
    communicate notify "IP: $ipv4"
    communicate notify "gateway: $gateway4"
    communicate notify "nameservers: $nameserver4"
    communicate notify "domain: $domainname"
}

get_config_value(){
    [ $2 ]  && file=$2 || file=$netplan
    egrep -e "^[[:blank:]]*$1:" $file
}

prepare_netplan(){
    [ -z $interface ] && select_interface
    cp $netplan.bak $netplan
    #header=$(egrep -e '^#' $netplan)
    printf "$header\nnetwork:\n    version:$(get_config_value version | cut -f2 -d:)\n    renderer:$(get_config_value renderer | cut -f2 -d:)\n    ethernets:\n        $interface:\n            dhcp4:$(get_config_value dhcp4 | cut -f2 -d:)\n            addresses:$(get_config_value addresses | head -1 | cut -f2 -d:)\n            gateway4:$(get_config_value gateway | cut -f2 -d:)\n            nameservers:\n                addresses:$(get_config_value addresses | tail -1 | cut -f2 -d:)\n" > $netplan
    [ -z $renderer $dhcp4 $ipv4 $gateway4 $nameserver $domainname ] 2>/dev/null && get_interface_information $interface
    change_netplan renderer $renderer
    change_netplan dhcp4 $dhcp4
    change_netplan ipv4 $ipv4
    change_netplan gateway4 $gateway4
    change_netplan nameserver4 $nameserver4
}

change_netplan(){
    [ ! -f "$netplan" ] && prepare_netplan
    renderer(){
        if [ $1 ]; then
            renderer=$1
        else
            if [ $networkmanager ]; then
                read -p 'Manage interfaces with either: 1) networkd or 2) NetworkManager [1,2] ' renderer
                [ "$renderer" = '2' -o "$renderer" = 'NetworkManager' ] && renderer='NetworkManager' || renderer='networkd'
            else
                renderer='networkd'
            fi
        fi
        sed -Ei "/$(get_config_value renderer)/s/:(.*)?$/: $renderer/" $netplan
    }
    dhcp4(){
        if [ $1 ]; then
            dhcp4=$1
        else
            read -p 'Manage interface via DHCP? [y/N] ' dhcp4
            [ "$dhcp4" = 'y' -o "$dhcp4" = 'Y' -o "$dhcp4" = 'yes' -o "$dhcp4" = 'Yes' ] && dhcp4='true' || dhcp4='false'
        fi
        sed -Ei "/$(get_config_value dhcp4)/s/:(.*)?$/: $dhcp4/" $netplan
    }
    ipv4(){
        if [ $1 ]; then
            ipv4=$1
        else
            read -p 'Please enter a valid IPv4 address for address: ' ipv4
            read -p 'Please enter a valid CIDR address for subnet: ' cidr
            [ $(echo "$ipv4/$cidr" | egrep -e '([[:digit:]]{1,3}\.){3}[[:digit:]]{1,3}/[[:digit:]]{1,2}') ] && ipv4="$ipv4/$cidr" || change_netplan ipv4
        fi
        tmp=$ipv4
        ipv4=$(echo $tmp | sed 's|/| |')
        sed -Ei "1,/addresses/s/(addresses:)(.*)?$/\1 \[$ipv4\]/" $netplan
        ipv4=$tmp
        sed -Ei "s/(([[:digit:]]{1,3}\.){3}[[:digit:]]{1,3}) ([[:digit:]]{1,2})/\1\/\3/" $netplan
    }
    gateway4(){
        if [ $1 ]; then
            gateway4=$1
        else
            read -p 'Please enter a valid IPv4 address for gateway: ' gateway4
            [ $(echo "$gateway4" | egrep -e '([[:digit:]]{1,3}\.){3}[[:digit:]]{1,3}') ] || change_netplan gateway4
        fi
        sed -Ei "/$(get_config_value gateway4)/s/:(.*)?$/: $gateway4/" $netplan
    }
    nameserver4(){
        if [ $1 ]; then
            nameserver4=$1
        else
            read -p 'Please enter a valid IPv4 address for nameserver. You can enter two entries by separating entries with a comma (e.g. ?.?.?.?,?.?.?.?) ' nameserver4
            [ $(echo "$nameserver4" | egrep -e '(([[:digit:]]{1,3}\.){3}[[:digit:]]{1,3},?){1,2}') ] || change_netplan nameserver4
        fi
        sed -Ei "$ s|(addresses:)(.*)?$|\1 [$nameserver4]|" $netplan
        #sed -Ei "s/(DNS=)/\1$nameserver4/" /etc/systemd/resolved.conf
    }

    case $1 in
        renderer) renderer $2;;
        dhcp4) dhcp4 $2;;
        ipv4) ipv4 $2;;
        gateway4) gateway4 $2;;
        nameserver4) nameserver4 $2;;
        all) renderer && dhcp4 && ipv4 && gateway4 && nameserver4;;
        *) communicate notify "renderer\ndhcp4\nipv4\ngateway4\nnameserver4\nall";;
    esac
}

verify_config(){
    netplan apply
}

debug(){
    validate_input alpha
}

case $1 in
    select) select_interface;;
    print) print_interface_information $2;;
    version) backup_restore $2 $3;;
    prepare) [ $2 ] && interface=$2 && prepare_netplan $interface;;
    change) change_netplan $2;;
    verify) verify_config;;
    debug) debug $1;;
    *) cat $netplan;;
esac
set +x
