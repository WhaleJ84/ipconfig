#!/usr/bin/env sh
#set -x

# Ensure the user is running with superuser privileges
[ "$(id -u)" != 0 ] && echo 'This script must be run with superuser privileges.' && exit 0

#IPCIDR='([[:digit:]]{1,3}\.){3}[[:digit:]]{1,3}/[[:digit:]]{1,2}'
# TODO: Ensure /etc/netplan is the correct dir for configs
netplan=$(ls /etc/netplan/01-*.yaml)
[ ! -f /etc/systemd/resolved.conf ] && cp /etc/systemd/resolved.conf.bak /etc/systemd/resolved.conf
resolve=$(ls /etc/systemd/resolved.conf)
files="$netplan
$resolve"
hostname=$(hostname -s)
# Check for installed programs
[ "$(command -v NetworkManager 2>/dev/null)" ] && networkmanager='true'
[ "$(command -v dmenu 2>/dev/null)" ] && dmenu='true'
[ "$(command -v notify-send 2>/dev/null)" ] && notifysend='true'
#unset dmenu # FOR DEBUG PURPOSES
#unset notifysend # FOR DEBUG PURPOSES

validate_input(){
    [ -z "$2" ] && echo 'No input' || input="$2"
    output=$(echo "$input" | sed 's/[^[:alpha:][:digit:] ,.]//g' | tr '[:upper:]' '[:lower:]')
    echo "$output"
}

communicate(){
    prompt(){
        description="$1"
        options="$2"
        if [ $dmenu ]; then
            printf "%s\n" $options | dmenu -i -p "${description}"
        else
            [ -n "$options" ] && optstring="options: ${options}" || optstring=''
            read -p "${optstring}${description}: " outcome
            echo $outcome
        fi
    }

    notify(){
        [ $notifysend ] && notify-send "$1" || echo "$1"
    }

    case $1 in
        prompt) prompt "$2" "$3";;
        notify) notify "$2";;
    esac
}

backup_restore(){
    get_file(){
        [ "$1" ] && file=$1 || file=$(communicate prompt 'Enter file' "$files
back")
        [ "$file" = 'back' ] && backup_option='back' 2>/dev/null
        [ ! -f "$file" ] && backup_restore "$1" 2>/dev/null
    }
    backup(){
        cp "$file" "$file.bak"
    }
    restore(){
        cp "$file.bak" "$file"
    }

    backup_options='backup
restore
back'
    unset backup_option
    while [ "$backup_option" != 'back' ]; do
        backup_option=$(communicate prompt 'Available operations' "$backup_options")
        case $backup_option in
            backup) get_file "$2" && backup "$file" 2>/dev/null ;;
            restore) get_file "$2" && restore "$file" 2>/dev/null ;;
            back) ;;
            *) communicate notify 'backup
restore
back' ;;
        esac
    done
}
# Ensure there is a backup. Requires sudo privileges
[ ! -e "$netplan.bak" ] && backup_restore backup "$netplan"
[ ! -e "$resolve.bak" ] && backup_restore backup "$resolve"

select_interface(){
    interface=$(communicate prompt 'Select interface' "$(ls /sys/class/net)")
    [ "$(ls /sys/class/net | grep -e "$interface")" ] || select_interface
}

get_interface_information(){
    [ -z "$interface" ] && select_interface
    renderer=$(grep renderer "$netplan" | awk '{print $2}')
    dhcp4=$(grep dhcp4 "$netplan" | awk '{print $2}')
    [ ! "$dhcp4" ] && dhcp4='no'
    ipv4=$(ip address show dev "$interface" | grep -e 'inet ' | sed -E 's|[^[:digit:]]*(([[:digit:]]{1,3}\.){3}[[:digit:]]{1,3}/[[:digit:]]{1,2}).*|\1|')
    gateway4=$(ip route show dev "$interface" | grep -e 'default via' | sed -E 's/[^[:digit:]]*(([[:digit:]]{1,3}\.){3}[[:digit:]]{1,3}).*/\1/' | head -1)
    nameserver4=$(grep -e '^DNS' /etc/systemd/resolved.conf | cut -f2 -d=)
    [ -z "$nameserver4" ] && nameserver4=$(grep -e 'nameserver' /etc/resolv.conf | cut -f2 -d' ')
    domainname=$(hostname -d)
    [ ! "$domainname" ] && domainname='not set'
}

print_interface_information(){
    [ "$1" ] && interface=$1 && get_interface_information "$interface"
    [ -z $renderer $dhcp4 $ipv4 $gateway4 $nameserver $domainname ] 2>/dev/null && get_interface_information
    communicate notify "Renderer: $renderer
DHCP: $dhcp4
IP: $ipv4
gateway: $gateway4
nameservers: $nameserver4
domain: $domainname"
}

prepare_netplan(){
    [ -z "$interface" ] && select_interface
    cp "$netplan.bak" "$netplan"
    header=$(grep -E -e '^#' "$netplan")
    printf "$header\nnetwork:\n    version:$(get_config_value version | cut -f2 -d:)\n    renderer:$(get_config_value renderer | cut -f2 -d:)\n    ethernets:\n        $interface:\n            dhcp4:$(get_config_value dhcp4 | cut -f2 -d:)\n            addresses:$(get_config_value addresses | head -1 | cut -f2 -d:)\n            gateway4:$(get_config_value gateway | cut -f2 -d:)\n            nameservers:\n                addresses:$(get_config_value addresses | tail -1 | cut -f2 -d:)\n" > "$netplan"
    [ -z $renderer $dhcp4 $ipv4 $gateway4 $nameserver $domainname ] 2>/dev/null && get_interface_information "$interface"
    #change_netplan renderer $renderer
    #change_netplan dhcp4 $dhcp4
    #change_netplan ipv4 $ipv4
    #change_netplan gateway4 $gateway4
    #change_netplan nameserver4 $nameserver4
}

get_config_value(){
    [ "$2" ]  && file=$2 || file=$netplan
    grep -E -e "^[[:blank:]]*$1:" "$file"
}

change_netplan(){
    [ ! -f "$netplan" ] && prepare_netplan
    renderer(){
        if [ "$1" ]; then
            renderer=$1
        else
            if [ $networkmanager ]; then
                renderer=$(communicate prompt 'Select renderer' 'networkd
NetworkManager')
                [ "$renderer" = 'networkmanager' ] && renderer='NetworkManager' || renderer='networkd'
            else
                renderer='networkd'
            fi
        fi
        sed -Ei "/$(get_config_value renderer)/s/:(.*)?$/: $renderer/" "$netplan"
    }
    dhcp4(){
        if [ "$1" ]; then
            dhcp4=$1
        else
            dhcp4=$(communicate prompt 'Manage interface via DHCP? (Y/n)' 'yes
no')
            [ "$dhcp4" = 'n' -o "$dhcp4" = 'no' ] && dhcp4='false' || dhcp4='true'
        fi
        sed -Ei "/$(get_config_value dhcp4)/s/:(.*)?$/: $dhcp4/" "$netplan"
    }
    ipv4(){
        if [ "$1" ]; then
            ipv4=$1
        else
            ipv4=$(communicate prompt 'Enter IPv4 address' '')
            cidr=$(communicate prompt 'Enter CIDR subnet' '')
            [ $(echo "$ipv4/$cidr" | grep -E -e '([[:digit:]]{1,3}\.){3}[[:digit:]]{1,3}/[[:digit:]]{1,2}') ] && ipv4="$ipv4/$cidr" || change_netplan ipv4
        fi
        tmp=$ipv4
        ipv4=$(echo "$tmp" | sed 's|/| |')
        sed -Ei "1,/addresses/s/(addresses:)(.*)?$/\1 \[$ipv4\]/" "$netplan"
        ipv4=$tmp
        sed -Ei "s/(([[:digit:]]{1,3}\.){3}[[:digit:]]{1,3}) ([[:digit:]]{1,2})/\1\/\3/" "$netplan"
    }
    gateway4(){
        if [ "$1" ]; then
            gateway4=$1
        else
            gateway4=$(communicate prompt 'Enter IPv4 gateway' '')
            [ $(echo "$gateway4" | egrep -e '([[:digit:]]{1,3}\.){3}[[:digit:]]{1,3}') ] || change_netplan gateway4
        fi
        sed -Ei "/$(get_config_value gateway4)/s/:(.*)?$/: $gateway4/" "$netplan"
    }
    nameserver4(){
        if [ "$1" ]; then
            nameserver4=$1
        else
            nameserver4=$(communicate prompt 'Enter IPv4 nameserver(s) (e.g. ?.?.?.?,?.?.?.?)')
            [ $(echo "$nameserver4" | egrep -e '(([[:digit:]]{1,3}\.){3}[[:digit:]]{1,3},?){1,2}') ] || change_netplan nameserver4
        fi
        # Includes in $netplan for logging purposes only
        sed -Ei "$ s|(addresses:)(.*)?$|\1 [$nameserver4]|" "$netplan"
    }
    domainname(){
        if [ "$1" ]; then
            domainname=$1
        else
            domainname=$(communicate prompt 'Enter domain name' '')
        fi
        #sed -Ei "" ""
    }

    change_options='renderer
dhcp4
ipv4
gateway4
nameserver4
all
back'
    unset change_option
    while [ "$change_option" != 'back' ]; do
        change_option=$(communicate prompt 'Available options' "$change_options")
        case $change_option in
            renderer) renderer "$2";;
            dhcp4) dhcp4 "$2";;
            ipv4) ipv4 "$2";;
            gateway4) gateway4 "$2";;
            nameserver4) nameserver4 "$2";;
            domainname) domainname "$2" ;;
            back) change_option='back' ;;
            *) communicate notify 'renderer
dhcp4
ipv4
gateway4
nameserver4
domainname' && change_option='back' ;;
        esac
    done
}

verify_config(){
    netplan apply
    sed -Ei "s/^#?(DNS=)(.*)$/\1$(echo $nameserver4 | cut -d, -f1)/" "$resolve"
    sed -Ei "s/^#?(FallbackDNS=)(.*)$/\1$(echo $nameserver4 | cut -d, -f2)/" "$resolve"
    [ $(echo $nameserver4 | cut -d, -f2) = $(echo $nameserver4 | cut -d, -f1) ] && sed -Ei 's/^#?(FallbackDNS=)(.*)$/#\1/' "$resolve"
    sed -Ei 's/^(FallbackDNS=)$/#\1/; s/^(DNS=)$/#\1/' "$resolve"
    service systemd-resolved restart
}

ip_options='select
current
files
prepare
configure
changed
commit
exit'
#ip_options='current
#configure
#changed
#commit
#exit'
while [ "$ip_option" != 'commit' ]; do
    ip_option=$(communicate prompt 'Available operations' "$ip_options")
    case $ip_option in
        select) select_interface ;;
            current) print_interface_information "$2" ;;
            files) backup_restore "$2" "$3" ;;
            prepare) [ "$2" ] && interface=$2 && prepare_netplan "$interface" || select_interface && prepare_netplan "$interface" ;;
            configure) change_netplan "$2" ;;
            changed) communicate notify "$(cat $netplan)" ;;
            commit) verify_config ;;
            exit) exit 0 ;;
            *) communicate notify "$ip_options" ;;
        esac
    done
#set +x
